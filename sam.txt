mport pandas as pd
import numpy as np
from openpyxl import load_workbook

# File path and sheet name
file_path = "your_file.xlsx"
sheet_name = "YTD report"

# Your DataFrame (Replace with actual data)
df = pd.DataFrame({...})

# Convert DataFrame to NumPy array for faster processing
data = df.to_numpy()

# Load the workbook
wb = load_workbook(file_path)

# If the sheet exists, delete it (keeps other sheets intact)
if sheet_name in wb.sheetnames:
    del wb[sheet_name]

# Create a new sheet with the same name
ws = wb.create_sheet(title=sheet_name)

# Write column headers
ws.append(df.columns.tolist())

# Write data using a generator (efficient memory usage)
ws.append(row for row in map(tuple, data))  # Generator-based writing

# Save the workbook
wb.save(file_path)

print(f"âœ… Sheet '{sheet_name}' replaced successfully while keeping everything else intact!")








import numpy as np
import pandas as pd

def PBTAllocation_Calculation(
    inResidualProfitforAlloc, 
    inCapitalAllocPct, 
    inTraderAllocPct, 
    inAllocPct, 
    inGlobalTraderComp, 
    inGlobalCapitalMeas, 
    inAllocToTrading, 
    inAllocToCapital
):
    # Calculate conditions as arrays
    cond1 = inResidualProfitforAlloc <= 0
    cond2 = (
        inResidualProfitforAlloc * inGlobalTraderComp /
        (inGlobalCapitalMeas + inGlobalTraderComp) > inGlobalTraderComp
    )
    
    # Perform calculations based on conditions
    result = np.where(
        cond1,
        inResidualProfitforAlloc * inAllocPct,  # Condition 1: if <= 0
        np.where(
            cond2,
            inAllocToCapital * inTraderAllocPct + inAllocToTrading * inTraderAllocPct,  # Condition 2: nested
            inResidualProfitforAlloc * inAllocPct  # Else
        )
    )
    
    return result
# Example input data
data = {
    "inResidualProfitforAlloc": [100, -50, 200, 0],
    "inCapitalAllocPct": [0.1, 0.2, 0.3, 0.4],
    "inTraderAllocPct": [0.5, 0.6, 0.7, 0.8],
    "inAllocPct": [0.2, 0.3, 0.4, 0.5],
    "inGlobalTraderComp": [1000, 1000, 1000, 1000],
    "inGlobalCapitalMeas": [500, 500, 500, 500],
    "inAllocToTrading": [300, 300, 300, 300],
    "inAllocToCapital": [200, 200, 200, 200],
}

df = pd.DataFrame(data)

# Apply vectorized function
df["PBTAllocation"] = PBTAllocation_Calculation(
    df["inResidualProfitforAlloc"], 
    df["inCapitalAllocPct"], 
    df["inTraderAllocPct"], 
    df["inAllocPct"], 
    df["inGlobalTraderComp"], 
    df["inGlobalCapitalMeas"], 
    df["inAllocToTrading"], 
    df["inAllocToCapital"]
)

print(df)






Sub LoadSourceData()
    Dim ws As Worksheet
    Dim SourceFile As String
    Dim NewSourceData As Worksheet
    Dim SourceDataExists As Boolean
    Dim ThisWorkbook As Workbook
    Dim PivotTable As PivotTable
    Dim wsPivot As Worksheet
    Dim FileExt As String
    Dim qt As QueryTable
    
    ' Set reference to the workbook with the pivot tables
    Set ThisWorkbook = ActiveWorkbook
    
    ' Open file dialog to select the source data file
    SourceFile = Application.GetOpenFilename(FileFilter:="Excel Files (*.xls; *.xlsx), *.xls; *.xlsx, CSV Files (*.csv), *.csv", Title:="Select the Source Data File")
    
    ' Exit if no file is selected
    If SourceFile = "False" Then Exit Sub
    
    ' Get the file extension to identify the file type
    FileExt = LCase(Right(SourceFile, Len(SourceFile) - InStrRev(SourceFile, ".")))
    
    ' Check if "SourceData" worksheet already exists and delete if it does
    SourceDataExists = False
    For Each ws In ThisWorkbook.Sheets
        If ws.Name = "SourceData" Then
            Application.DisplayAlerts = False
            ws.Delete
            Application.DisplayAlerts = True
            SourceDataExists = True
            Exit For
        End If
    Next ws
    
    ' Handle Excel or CSV files
    If FileExt = "xls" Or FileExt = "xlsx" Then
        ' Open the selected source data Excel file
        Set SourceWorkbook = Workbooks.Open(SourceFile)
        
        ' Copy data from the first sheet of the source data file to this workbook
        SourceWorkbook.Sheets(1).Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
        Set NewSourceData = ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
        
        ' Rename the new sheet to "SourceData"
        NewSourceData.Name = "SourceData"
        
        ' Close the source data file without saving
        SourceWorkbook.Close False
    
    ElseIf FileExt = "csv" Then
        ' Add a new sheet for the CSV data
        Set NewSourceData = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        NewSourceData.Name = "SourceData"
        
        ' Import the CSV data into the new sheet using QueryTables
        Set qt = NewSourceData.QueryTables.Add(Connection:="TEXT;" & SourceFile, Destination:=NewSourceData.Range("A1"))
        
        ' Set the properties of the query table
        With qt
            .TextFileParseType = xlDelimited
            .TextFileCommaDelimiter = True
            .TextFileColumnDataTypes = Array(1) ' Treat all columns as text
            .Refresh BackgroundQuery:=False
        End With
        
    Else
        MsgBox "Unsupported file type. Please select an Excel or CSV file.", vbExclamation
        Exit Sub
    End If
    
    ' Refresh all pivot tables in the workbook
    For Each wsPivot In ThisWorkbook.Worksheets
        For Each PivotTable In wsPivot.PivotTables
            ' Update the pivot cache using correct syntax
            PivotTable.ChangePivotCache ThisWorkbook.PivotCaches.Create( _
                xlDatabase, NewSourceData.UsedRange)
            PivotTable.RefreshTable
        Next PivotTable
    Next wsPivot
    
    MsgBox "Source data has been updated and pivot tables refreshed.", vbInformation
End Sub
